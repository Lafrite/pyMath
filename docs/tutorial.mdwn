# Utilisation de pyMath

## À quoi sert pyMath?

pyMath est un module python qui permet la manipulation d'expressions mathématiques. Voici ce qu'il est capable de faire:

* *Calculer comme un collégien*: Pour faire de la correction automatisé d'exercice, un logiciel de calcul formel ne suffit pas. Si les étapes de calculs ne sont pas présentes, l'élève ne pourra pas analyser ses erreurs ou s'inspirer de la correction.

    >>> from pymath.expression import Expression
    >>> ajout_fractions = Expression("2 / 5 + 2 / 3")
    >>> for i in ajout_fractions.simpliy():
    ...     print(i)
    ...
    \frac{ 2 }{ 5 } + \frac{ 2 }{ 3 }
    \frac{ 2 \times 3 }{ 5 \times 3 } + \frac{ 2 \times 5 }{ 3 \times 5 }
    \frac{ 6 + 10 }{ 15 }
    \frac{ 16 }{ 15 }

* *Créer des exercices aléatoirement*: Pour faire des devoirs personnels, des fiches de révisions ou des exercices en classe, un générateur d'expressions est inclus.

    >>> from pymath.expression import Expression
    >>> ajout_fraction = Expression.random("{a} + {b} / {c}")
    >>> print(ajout_fraction)
    5 + \frac{ -7 }{ 4 }

* *Gérer différents type de données*: Pour le moment, pyMath est capable de gérer les entiers naturels, les rationnels (sous forme de fractions) et les polynômes. L'utilisation des nombres à virgules et des racines devraient être ajoutés dans les prochaines versions.

    >>> from pymath.fraction import Fraction
    >>> une_fraction = Fraction(1,2)
    >>> print(une_fraction)
    1 / 2
    >>> from pymath.polynom import Polynom 
    >>> un_polynom = Polynom([1,2,3])
    >>> print(un_polynom)
    3 x^{  2 } + 2 x + 1

* *Afficher avec deux types de rendus*: Un en mode texte pour l'affichage dans une console. Un deuxième spécialement pour écrire des documents latex.

    >>> from pymath.expression import Expression
    >>> ajout_fractions = Expression("2 / 5 + 2 / 3")
    >>> for i in ajout_fractions.simpliy():
    ...     print(i)
    \frac{ 2 }{ 5 } + \frac{ 2 }{ 3 }
    \frac{ 2 \times 3 }{ 5 \times 3 } + \frac{ 2 \times 5 }{ 3 \times 5 }
    \frac{ 6 + 10 }{ 15 }
    \frac{ 16 }{ 15 }
    >>> from pymath.render import txt
    >>> Expression.set_render(txt)
    >>> for i in ajout_fractions.simpliy():
    ...     print(i)
    ...
    2 / 5 + 2 / 3
    2 * 3 / 5 * 3 + 2 * 5 / 3 * 5
    ( 6 + 10 ) / 15
    16 / 15


Ce module a pour but d'être un outil pour faciliter la construction d'exercices et leurs correction. Il a pour but d'être le plus simple possible d'utilisation afin que tout le monde avec un minimum de connaissance en programmation puisse créer librement des exercices. 

## Calculer comme un collégien.

Actuellement le module principal pour faire calculer python comme un collégien est *pymath.expression*.

    >>> from pymath.expression import Expression


### Déclarer une expression 
Un expression peut être initialisée de deux façons différentes: à partir d'une chaine de caractères ou à partir de la liste des termes (en postfix - cette méthode est essentiellement utilisée pour programmer les modules, elle ne sera pas détaillée ici).

    >>> un_calcul = Expression("1 + 2 * 3")
    >>> print(un_calcul)
    1 + 2 \times 3
    >>> ajout_fractions = Expression("2 / 5 + 2 / 3")
    >>> print(ajout_fractions)
    \frac{ 2 }{ 5 } + \frac{ 2 }{ 3 }

Et si l'on souhaite un rendu plus adapté à la console:

    >>> from pymath.render import txt
    >>> Expression.set_render(txt)
    >>> un_calcul.render()
    1 + 2 * 3
    >>> print(ajout_fractions)
    2 / 5 + 2 / 3

### Simplification des expressions
Une fois les expressions créées, elles peuvent se réduire en expliquant les étapes et en respectant les règles de priorités. Les exemples suivants seront données avec un rendu texte.

    >>> from pymath.expression import Expression
    >>> from pymath.renders import txt
    >>> Expression.set_render(txt)

    >>> exp = Expression("1 + 2 * 3")
    >>> for i in exp.simplify():
    ...     print(i)
    ... 
    1 + 2 * 3
    1 + 6
    7
        

Les opérations autorisées sont les opérations "classique": + - * / ^. L'utilisation des parenthèses est aussi gérée.

    >>> exp = Expression("1 + 2 / 5")
    >>> for i in exp.simplify():
    ...     print(i)
    ... 
    1 + 2 / 5
    ( 1 * 5 ) / ( 1 * 5 ) + ( 2 * 1 ) / ( 5 * 1 )
    ( 5 + 2 ) / 5
    7 / 5

    >>> exp = Expression("(2 + 4)(3 - 4 * 2)")
    >>> for i in exp.simplify():
    ...     print(i)
    ... 
    ( 2 + 4 ) ( 3 - ( 4 * 2 ) )
    6 * ( 3 - 8 )
    6 * ( -5 )
    -30

### Type de variables et opérations
On peut vouloir créer directement des objets (fractions ou polynômes) sans passer par le module expression (voir [fraction](fraction.mdwn) et [polynom](polynom.mdwn) pour plus de details)

    >>> from pymath.fraction import Fraction
    >>> fraction1 = Fraction(1,2)
    >>> fraction2 = Fraction(2,3)
    >>> print(fraction1)

    >>> from pymath.polynom import Polynom
    >>> p = Polynom([1,2,3])
    >>> print(p)
    3 x ^ 2 + 2 x + 1
    >>> q = Polynom([0,0,1])
    x ^ 2

Contrairement aux opérations sur les Expressions, qui renvoient une nouvelle expression

    >>> fraction_expression = Expression("2 / 3")
    >>> autre_fraction_expression = Expression("4 / 9")
    >>> print(fraction_expression + autre_fraction_expression)
    2 / 3 + 4 / 9

les opérations sur les fractions ou les polynômes renvoient la liste des étapes jusqu'à leur forme simplifiée

    >>> fraction1 + fraction2
    [< Expression [1, 3, '*', 2, 3, '*', '/', 2, 2, '*', 3, 2, '*', '/', '+']>, < Expression [3, 4, '+', 6, '/']>, < Fraction 7 / 6>]
    >>> for i in (fraction1 + fraction2):
    ...     print(i)
    ...
    1 * 3 / 2 * 3 + 2 * 2 / 3 * 2
    ( 3 + 4 ) / 6
    7 / 6
    >>> p + q
    [< Polynom [[1, 0], [2, 0], [3, 1]]>, < Polynom [1, 2, < Expression [3, 1, '+']>]>, < Polynom [1, 2, 4]>
    >>> for i in (p+q):
    ...     print(i)
    ...
    3 x ^ 2 + x ^ 2 + 2 x + 1
    ( 3 + 1 ) x ^ 2 + 2 x + 1
    4 x ^ 2 + 2 x + 1

### Différents rendus
Comme dit dans l'introduction, il y a deux types de rendus: un rendu texte (utilisé depuis le début) et un rendu latex. 

Voici un exemple de l'utilisation du rendu latex (par défaut). 

    >>> exp = Expression("1 + 2 / 5")
    >>> for i in exp.simplify():
    ...     print(i)
    ... 
    1  +  \frac{ 2 }{ 5 }
    \frac{ 1 \times 5 }{ 1 \times 5 }  +  \frac{ 2 \times 1 }{ 5 \times 1 }
    \frac{ 5  +  2 }{ 5 }
    \frac{ 7 }{ 5 }

Pour changer le rendu, on import le rendu depuis *pymath.render* et on appelle la méthode de classe d'Expression *set_render*.

Voici un exemple d'utilisation du rendu txt

    >>> from pymath.render import txt
    >>> Expression.set_render(txt)
    >>> exp = Expression("1 + 2 / 5")
    >>> for i in exp.simplify():
    ...     print(i)
    ... 
    2 / 5 + 2 / 3
    2 * 3 / 5 * 3 + 2 * 5 / 3 * 5
    ( 6 + 10 ) / 15
    16 / 15


## Générer des expressions aléatoirement.

Le module qui permet de générer des expressions aléatoirement est *pymath.random_expression*

    >>> from pymath.random_expression import RdExpression

### Créer un expression
Pour créer une expression il faut au moins une chose: la forme de l'expression. Toutes les lettres entre accolades seront remplacées par des valeurs aléatoires (par défaut entre -10 et 10 et non nulles).

    >>> form = "2* {a} + 3"
    >>> random_expression_generator = RdExpression(form)
    >>> generated_expression = random_expression_generator()
    >>> type(generated_expression)
    pymath.expression.Expression
    >>> print(generated_expression)
    '2 \times 9  +  3'
    >>> print(random_expression_generator(30, 40))
    '2 \times 31  +  3'

On remarque que ici que *random_expression_generator* renvoie une expression. Cela permettra ensuite de simplifier ou manipuler les expressions
 On verra plus tard comment se passer de cette classe pour par exemple créer des expressions avec des opérateurs non implémentés dans Expression.

### Créer une expression avec conditions
Parfois il peut être nécessaire d'imposer des conditions sur les éléments à générer pour créer des exercices spécifiques.

    >>> form = "{a} / {b} + {c} / {d}"
    >>> conditions = ["abs({b}) != 1", "{d} > 1", "{b} != {d}", "gcd({a},{b}) == 1", "gcd({c},{d}) == 1"]
    >>> random_frac_add_generator = RdExpression(form, conditions)
    >>> print(random_frac_add_generator())
    '\frac{ 4 }{ 5 }  +  \frac{ 9 }{ 7 }'

La méthode pour créer les valeurs avec des conditions est la méthode par rejet. Elle n'est pas très efficace et rien n'est encore prévu dans le cas où aucune valeur n'est possible. 

### Opérations avec les valeurs générées
Pour éviter de faire tourner la méthode par rejet trop longtemps, il est possible de faire des calculs avec les valeurs générées.

    >>> form = "{a} / {b} + {c} / {k*b}"
    >>> conditions = ["abs({b}) != 1", "{k} > 1", "{b} != {d}", "gcd({a},{b}) == 1", "gcd({c},{k*b}) == 1"]
    >>> random_frac_add_generator = RdExpression(form, conditions)
    >>> print(random_frac_add_generator())
    '\frac{ -9 }{ 7 }  +  \frac{ 1 }{ 28 }

### Rendu des expressions
On peut vouloir ne pas passer par la classe Expression pour obtenir notre expression (si l'on veut utiliser la racine carré par exemple, ou pour créer n'importe quoi qui ne fait pas intervenir d'expression). Pour cela il va falloir changer la forme du rendu

    >>> RdExpression.set_form("raw")
    >>> form = "{a} / {b} + {c} / {k*b}"
    >>> conditions = ["abs({b}) != 1", "{d} > 1", "{b} != {d}", "gcd({a},{b}) == 1", "gcd({c},{k*b}) == 1"]
    >>> random_frac_add_generator = RdExpression(form, conditions)
    >>> exp = random_frac_add_generator()
    >>> type(exp)
    str
    >>> print(exp)
    -2 / 5 + -8 / 35
    
    >>> form = "{a**2}x^2 + {2*a*b} x + {b**2}"
    >>> random_id_rmq_generator = RdExpression(form)
    >>> print(random_id_rmq_generator())
    '100x^2 + -180 x + 81'
    >>> random_id_rmq_generator()
    '49x^2 + 42 x + 9'

On remarque le défaut d'utiliser cette forme, le rendu est moins bien fait (dans l'exemple, il n'y a pas de parenthèses autour du -8).
